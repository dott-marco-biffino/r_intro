---
title: "Introduzione a R"
subtitle: "Un linguaggio di programmazione libero e gratuito in salsa statistica"
author: "Marco Biffino"
format: html
---

## Software libero

> “Free software” is a matter of liberty, not price. To understand the concept, you should think of “free” as in “free speech”, not as in “free beer”. *Richard Stallman - Free Software Fundation*

> Free software is a matter of the users' freedom to run, copy, distribute, study, change and improve the software. *Richard Stallman - Free Software Fundation*

Sono quattro le libertà fondamentali che il software libero garantisce agli utenti:

1. Eseguire il programma per qualunque scopo

2. Studiare il funzionamento del programma e modificarlo per adattarlo alle proprie esigenze
Accedere al codice sorgente ne è un prerequisito 

3. Facoltà di ridistribuire copie del programma affinché si possa aiutare le persone vicine

4. Facoltà di migliorare il programma e di rilasciare al pubblico la versione migliorata, affinché l'intera comunità possa beneficiarne

### Software libero e analisi statistica

## R Project for Statistical Computing

Il sito web di R è [www.r-project.org](https://www.r-project.org) visibile in @fig-rproject . Nella home page sulla sinistra troviamo alcuni link interessanti:

- Quello alla lista di mirror del [CRAN  - Comprehensive R Archive Network](https://cran.r-project.org/mirrors.html) utile per lo scaricamento del software su cui torneremo più avanti;

- Quello alla [pagina](https://www.r-project.org/about.html) di informazioni generali su R;

- Una serie di link utili sotto la voce **Documentation** che permette l'accesso a manuali, a domande frequenti, a [R Journal](https://journal.r-project.org/), elenco dei [libri su R](https://www.r-project.org/doc/bib/R-books.html) e altro.

![Home page del sito *The R Project for Statistical Computing*. Le frecce arancioni evidenziano alcuni punti discussi nel testo. Screenshot effettuato il 06/02/2024.](figures/r-project_website.png){#fig-rproject}

### Cosa è R

**R** è un linguaggio di programmazione e un ambiente per il calcolo statistico e la rappresentazione grafica dei dati.

È un progetto GNU simile al [linguaggio **S**](https://en.wikipedia.org/wiki/S_(programming_language)) sviluppato da John Chambers e colleghi presso i Bell Labs e ne rappresenta una sua diversa implementazione con una buona retro compatibilità, nonostante alcune importanti differenze.

**R** offre sia un ambiente interattivo per il calcolo statistico e la rappresentazione grafica dei dati, sia l'esecuzione di script invocando l'interprete da un terminale.

**R** è:

- È un linguaggio matriciale^[Altri esempi di linguaggi matriciali sono [GAUSS](https://en.wikipedia.org/wiki/GAUSS_(software)), [MATLAB](https://it.wikipedia.org/wiki/MATLAB), [APL](https://en.wikipedia.org/wiki/APL_(programming_language)), [GNU Octave](https://octave.org/).], cioè un linguaggio che:

  - Non necessita di dichiarazioni specifiche di tipo e dimensione per definire vettori, matrici e array (cfr. @fig-postit): 
  
  - i vettori possono essere definiti per concatenazione di singoli elementi o di altri vettori,
  
  - le matrici possono essere costituite anche mediante affiancamento o sovrapposizione di vettori,
  
  - Non necessita di iterazioni per operare sugli array

- A tipizzazione debole (cfr. @fig-postit), cioè non è necessario dichiarare il tipo dei dati che si stanno trattando poiché l'interprete lo desume dai dati stessi, 

- Basato sul paradigma di programmazione funzionale,

- Dotato di capacità di programmazione strutturata (cicli e istruzioni condizionali),

- Dotato di capacità di programmazione orientata agli oggetti.

![Un mio appunto del 2009 sul confronto fra **FORTRAN 77** e **R** relativo alla creazione di una matrice. ](figures/post-it.png){#fig-postit}

### Interfaccia

**R** offre all'utente è un'interfaccia di base a linea di comando. 

L'interprete dei comandi è interattivo: quando l'utente digita al prompt  un'istruzione e preme invio, **R** la elabora e ne visualizza sullo schermo il risultato. Ad esempio:

```{r chunk1}
#| echo: true

10 + 5 * 3
```

Fanno eccezione le istruzioni che prevedono l'assegnazione del risultato a una variabile per le quali non è previsto, di norma, alcun output.

```{r chunk2}
#| echo: true

valore<- 10 + 5 * 4
```

Per vedere il risultato della precedente espressione è necessario richiamarlo:

```{r chunk3}
#| echo: true

valore
```

Oltre all'interfaccia a linea di comando offerta dall'inteprete **R**, esistono molte interfacce grafiche alternative.

Alcune rendono **R** simile ad altri ambienti di calcolo statistico dotandolo di interfaccia grafica punta&clicca con menù e finestre di dialogo che consentono di scegliere cosa fare e come farlo.

Altre sono maggiormente orientate alla programmazione e forniscono un ambiente di sviluppo integrato (IDE). L'IDE più celebre è [RStudio](https://posit.co/downloads/).

## Il linguaggio R

### Tipi di dati fondamentali

I tipi di dati fondamentali in **R** sono:

- ```logical``` con i valori ```FALSE``` e ```TRUE``` (che possono essere abbreviati in ```F``` e ```T```)

- ```integer``` numeri interi contraddistinti dal suffisso ```L``` p.es. ```23L```

- ```double``` numeri in doppia precisione che godono di una rappresentazione “intelligente”

- ```character``` stringhe racchiuse fra apici (```'```) o doppi apici (```"```)

### Valori speciali e costanti

Oltre ai già menzionati ```FALSE``` e ```TRUE```, abbreviati in ```F``` e ```T```, in **R** esistono i seguenti valori speciali:

- ```Inf```

- ```NA``` 

- ```NaN```

- ```NULL```)

In **R** esistono, inoltre, le seguenti costanti (in senso lato):

- ```LETTERS```, ```letters```, 

- ```month.abb```, ```month.name```, 

- ```pi```.

Diversamente da molti altri linguaggi la costante di Nepero, base dei logaritmi naturali, non è definita come costante in **R**.

### Vettori, matrici e array

Primi esempi sui vettori

Creazione di un vettore intero

```{r integer}
#| echo: true
c(4L, 6L, 11L, 3L, 2L)
```

Creazione di un vettore in doppia precisione 

```{r double}
#| echo: true
c(4, 6, 11, 3, 2)
```

Creazione di un vettore stringa

```{r character}
#| echo: true
c("4L", "6L", "11L", "3L", "2L")
```

Assegnazione di un vettore a una variabile

```{r integer2}
#| echo: true
x<- c(4L, 6L, 11L, 3L, 2L)
```

L'assegnazione *di solito* non produce alcun output nella console

Per visualizzare il contenuto della variabile ```x``` è sufficiente scriverla al prompt e premere invio:

```{r integer3}
#| echo: true
x
```

In realtà questa è solo una scorciatoia per una chiamata della  funzione ```print()``` che avviene implicitamente alla pressione del tasto invio:

```{r integer4}
#| echo: true
print(x)
```

Ovviamente sono disponibili i comuni operatori matematici applicabili agli operandi come il vettore ```x```:

```{r math1}
#| echo: true
-x

2 * x

x^2
```

Così come sono disponibili molte funzioni matematiche:
```{r math2}
#| echo: true
sqrt(x)

sin(x)

log(x)
```

```{r math3}
#| echo: true
sqrt(x) - x^2
```

I principali operatori matematici in R sono ```+```, ```-```, ```*```, ```/```, ```^```, ```%%```, ```%/%```. Per i dettagli si visiti la pagina di aiuto mediante il comando ```?Arithmetic``` 

È possibile concatenare vettori in un vettore più lungo:
```{r vector1}
#| echo: true
y<- c(x, x^2, sqrt(x))
y
```

È anche possibile arrangiare gli elementi di un vettore in una matrice:
```{r matrix1}
#| echo: true
A<- matrix(y, nrow=3, ncol=5)
A
```

È possibile digitare a prompt ```?c``` e ```?matrix``` per consultare le relative pagine di aiuto.

Veniamo alle funzioni per i calcoli statistici più semplici applicate, ad esempio, al vettore ```y```:

```{r}
#| echo: true
sum(y)
sum(y) / length(y)
sqrt(sum((y-mean(y))^2)/(length(y)-1))
```

Ovvero
```{r}
#| echo: true
mean(y)
sd(y)
```


### Liste

- Una lista in R è un insieme ordinato di oggetti qualsiasi, anche di tipo eterogeneo

- Agli elementi di una lista può essere attribuito un nome 

- Gli elementi di una lista sono accessibili anche attraverso l'indice di posizione

- Esistono funzioni specifiche che consentono di manipolare le liste in modo rapido ed efficiente evitando l'uso di cicli

```{r list1}
#| echo: true
l1<- list(
  pippo=c(1,2,3), 
  letters[1:3], 
  mat = A)

l1
```

#### Sottoliste e estrazione di elementi da una lista

Lista con un solo 1° elemento
```{r list2}
#| echo: true

l1[1]
```

1° elemento mediante indice

```{r lis3}
#| echo: true
l1[[1]]
```

1° elemento mediante nome

```{r list4}
#| echo: true
l1$pippo
```


### Data frame

- Sono gli oggetti R destinati a memorizzate le tabelle di dati

- Un data frame è una lista di vettori, anche di tipo eterogeneo, tutti della stessa lunghezza  

- Esistono metodi per accedere agevolmente ai dati in un data frame 

```{r df1}
#| echo: true
df<- data.frame(
  num = c(2, 15, 103),
  stg = c("M.B.", "A.T.", "S.R."),
  lgl = c(T, F, T)
)

df

```


### Attributi degli oggetti

Per ogni oggetto creato con **R** è possibile specificare un insieme arbitrario di attributi. 

Alcuni attributi, quali ad esempio ```dim```, ```dimnames``` e ```class```, hanno un significato specifico e sono utilizzati dall'interprete **R** per espletare le sue funzioni.

In generale gli attributi di un oggetto si possono: 

- consultare mediante la funzione ```attributes()```,

- impostare o modificare mediante la funzione ```attr()```.

```{r}
#| echo: true
z<- summary(y)

attributes(z)

attr(z, which = "new_attr")<- "new_value"
attributes(z)
```

Per quegli attributi che hanno un significato speciale e che ricorrono frequentemente possono esistere specifiche funzioni

```{r attributes3}
#| echo: true
attributes(A)

class(A)
dim(A)
ncol(A)
nrow(A)
```

Facciamo un altro esempio con il data frame creato in precedenza.

```{r attributes4}
#| echo: true
df
attributes(df)
names(df)
rownames(df)<- letters[1:3]
df
```

### Parole chiave riservate

Nella definizione del linguaggio R le seguenti parole chiave sono riservate e non possono essere utilizzate come nomi simbolici:
break, else, for, function, if, in, next, repeat, while.

I seguenti invece sono valori speciali e in quanto tali sono riservati:
FALSE, F, Inf, NA, NaN, NULL, TRUE, T

### Programmazione funzionale

In **R**, qualsiasi azione è definita mediante una chiamata a un'opportuna funzione cui vengono passati degli argomenti che possono essere oggetti, parametri ed opzioni.

La chiamata di una funzione produce un risultato che può essere visualizzato o assegnandolo ad un nome simbolico.

In **R** l'utente ha la possibilità di definire nuove funzioni all'interno dello spazio di lavoro mediante la parola chiave ```function()```.

Le funzioni utente sono l'elemento fondamentale della programmazione nel linguaggio **R** e per la sua estensione. 

Vediamo alcuni esempi di funzioni definite dall'utente.

**Esempio 1**: Vogliamo definire una funzione che calcoli la c.d. deviazione standard di popolazione (con denominatore ```n``` anziché ```n - 1```)

```{r functions1}
#| echo: true
sd_pop<- function(x) {
  sqrt( 
    sum( (x - mean(x) )^2 ) / ( length(x) )
  )
}
```


**Esempio 2**: Funzione che calcola l'intervallo di confidenza per la proporzione di un attributo dicotomico

Definiamo la funzione ```ic_prop```:

```{r functions3}
#| echo: true
ic_prop <- function(cases, n, labels, level = 0.95) {
  p <- cases / n
  z <- qnorm(level)
  me <- z * sqrt(p * (1 - p) / n)
  ic1 <- p - me
  ic2 <- p + me
  res <- data.frame(
    cases = cases,
    size = n,
    prop = round(p * 100, 2),
    inf = round(ic1 * 100, 2),
    sup = round(ic2 * 100, 2)
  )
  rownames(res) <- labels
  return(res)
}
```

```{r functions4}
#| echo: true
etich<- c("Fumatore", "ExFumatore", "MaiFumatore")
casi<- c(324, 146, 513)
dim_camp<- c(983, 1025, 1345)

ic_prop(cases = casi, 
        n = dim_camp, 
        labels = etich)
```

```{r functions5}
#| echo: true
casi<- 324
dim_camp<- 983
liv_conf<- c(.95, .99)
etich<- paste("Liv. ", 
              liv_conf * 100, "%", 
              sep = "")

ic_prop(cases = casi, 
        n = dim_camp, 
        labels = etich, 
        level = liv_conf)
```


### Controllo del flusso

### Programmazione orientata agli oggetti

### Espandibilità

#### CRAN

#### Gestione dei pacchetti 

#### CRAN Task Views

#### Creazione di nuovi pacchetti

## Gestione di una sessione di lavoro

### Il workspace

Quando R è in esecuzione il *workspace*, o spazio di lavoro, è interamente contenuto nella memoria dell'elaboratore e contiene gli oggetti che vengono creati nel corso delle elaborazioni a seguito di operazioni di assegnazione a nomi simbolici — cioè i dati, i risultati e le eventuali funzioni create dall'utente

In R, qualsiasi cosa venga assegnata ad un nome simbolico diviene un oggetto nello spazio di lavoro. 

La funzione ```ls()``` produce l'elenco degli oggetti contenuti nel *workspace*. Mentre la funzione ```ls.str()``` produce il medesimo elenco di oggetti aggiungendo, però, informazioni sul tipo dell'oggetto e sul valore.

```{r ls}
ls()
ls.str()
```

La funzione ```rm(<nome>)``` permette di rimuovere l'oggetto ```<nome>``` dal *workspace*. Usare ```?rm``` per approfondimenti.

- rm(<list>)

- save(<nome>, file="nomefile.Rdata")

  Salva nel file nomefile.rda l'oggetto<nome>.

- save.image(file="nomefile.Rdata")

  Salva l'immagine dell'intero workspace nel file nomefile.rda. Questa immagine non sarà letta al successivo riavvio del sistema, ma dovrà essere ricaricata esplicitamente.

- load(file="nomefile.Rdata")

  Carica nello spazio di lavoro gli oggetti R contenuti nel file nomefile.Rdata

### La cartella di lavoro

La cartella di lavoro o *working directory* è quella cartella nel file system in cui **R** effettua le operazioni di lettura e scrittura di file, se non diversamente specificato.

Di norma coincide con la cartella predefinita che il sistema operativo attribuisce all'utente.

È possibile salvare l'immagine del workspace in un file con estensione .Rdata nella directory di lavoro corrente.

### Le istruzioni in R

Le istruzioni in **R** possono essere costituite da:

- **Espressioni**: sequenze finite di operandi (vettori, matrici, liste, altri oggetti) e operatori (aritmetici, logici, di relazione, di concatenazione, ecc...) che deve essere valutata

- **Chiamate di funzione**: tipo ```f(...)```

- **Assegnazioni**: in una delle seguenti forme 

  - ```<nome> <- <espressione>```
  - ```<espressione> -> <nome>```
  - ```assign(<nome>, <espressione>)```
  
- Questi "elementi", espressioni, chiamate di funzione e assegnazioni possono essere combinati insieme

### Nomi simbolici

La stringa ```<nome>``` che abbiamo incontrato sopra sta ad indicare un generico nome simbolico usato per memorizzare nello spazio di lavoro il risultato della valutazione di un ```<espressione>```.

In **R** i nomi simbolici:

- possono contenere lettere maiuscole e/o minuscole e/o cifre,

- possono contenere i caratteri "_" e ,

- devono iniziare con una lettera o con ".",

- non devono contenere spazi, altri caratteri speciali, parole chiave riservate e nomi dei valori speciali.

::: {.callout-warning}
Il linguaggio R è *case-sensitive*: ```MB```, ```mb```, ```Mb``` e ```mB``` per l'interprete R sono cose diverse.
:::


### Sessioni si lavoro non interattive

#### source()

R offre anche la facoltà di lavorare in modo non interattivo
Cioè la possibilità di inserire sequenze di istruzioni in un file di testo per automatizzare il lavoro
Questi file possono essere letti dall'interprete dei comandi mediante l'istruzione
source(<nomefile.r>, echo=T, print.eval=T) 

#### Rscript

### Principali funzioni per la gestione della sessione di lavoro

## Il sistema di aiuto in linea e la documentazione

### Funzioni per l'interrogazione dell'aiuto in linea

- help("<parola_chiave>") oppure ?<parola_chiave>

  Visualizza la pagina di aiuto relativa alla parola chiave del linguaggio R, se esiste, altrimenti visualizza un messaggio di errore.
  
- help.search("<stringa>") 

  Visualizza l'elenco delle pagine di aiutoche contengono <stringa>. È consigliabileinterrogare il sistema di aiuto conquesta istruzione quando non si conosceesattamente quale parola chiave cercare.
  
- help.start()

  Avvia il sistema di aiuto in formato HTML. Tutte le successive richieste di aiuto vengono inviate al browser.
  
- options(htmlhelp=FALSE)

  Disattiva il sistema di aiuto in formato HTML.
  
- example(<argomento>)

  Esegue il codice esemplificativo riportato in calce alla pagina relativa ad <argomento>

### Contenuti di una tipica pagina di aiuto

Ogni pagina è identificata da un titolo ed è suddivisa in sezioni.

**Description**: breve descrizione dell'argomento.

**Usage**: fornisce la sintassi da usare nella chiamata della funzione, indicando il nome degli argomenti previsti e i loro eventuali valori predefiniti, nella forma nome=valore.

**Arguments**: riporta la lista degli argomenti, indicando per ogni argomento il tipo dei suoi valori, l'obbligatorietà o	l'opzionalità dello stesso.

**Details**: fornisce dettagli tecnici inerenti al modo in cui viene 			eseguita la funzione.

**Value**: descrive la natura del risultato generato

**Note**: avvertenze utili, generalmente riguardanti il risultato prodotto

**References**: riferimenti bibliografici e documentali relativi alla metodologia usata.

**See Also**: indica quali argomenti del sistema di aiuto sono correlati con l'argomento visualizzato.

**Examples**:	esempi di uso della funzione descritta.





